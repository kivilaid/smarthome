substitutions:
  device_name: "athom-gate-opener"  # Name of the device
  project_name: "Athom Technology.Gate Opener"  # Name of the project
  project_version: "1.2"  # Version of the project

esphome:
  name: "${device_name}"  # Use the device name from substitutions
  friendly_name: ""  # Friendly name for the device
  name_add_mac_suffix: true  # Append MAC address to the name
  project:
    name: "${project_name}"  # Use the project name from substitutions
    version: "${project_version}"  # Use the project version from substitutions

esp8266:
  board: esp8285  # Specify the board type

api:  # Enable API for communication

ota:  # Enable over-the-air updates

logger:  # Enable logging

mdns:
  disabled: false  # Enable mDNS

web_server:
  port: 80  # Enable web server on port 80

wifi:
  ap: {}  # This spawns an AP with the device name and MAC address with no password

captive_portal:  # Enable captive portal

dashboard_import:
  package_import_url: github://kivilaid/smarthome/blob/main/config/athom-gate-opener.yaml  # URL for importing dashboard configuration

sensor:
  - platform: uptime
    name: "Uptime Sensor"  # Sensor to track the device uptime

  - platform: wifi_signal
    name: "${device_name} WiFi Signal"  # Sensor to track WiFi signal strength
    update_interval: 60s  # Update interval for the WiFi signal sensor

binary_sensor:
  - platform: status
    name: "Status"  # Binary sensor for device status

  - platform: gpio
    name: "Contact"
    device_class: gate  # Change device class to gate
    id: contact
    pin:
      number: GPIO4  # GPIO pin number
      inverted: true  # Invert the signal
    filters:
      - delayed_on: 20ms  # Delay the on signal by 20ms

  - platform: gpio
    pin:
      number: GPIO14  # GPIO pin number
      mode: INPUT_PULLUP  # Set the pin mode to INPUT_PULLUP
      inverted: true  # Invert the signal
    name: "Button"  # Binary sensor for the button

switch:
  - platform: gpio
    pin: GPIO5  # GPIO pin number for the relay
    name: "Relay"  # Name for the relay switch
    id: relay  # ID for the relay switch

cover:
  - platform: template
    device_class: gate  # Change device class to gate
    name: "Gate"  # Name for the gate cover
    lambda: "return id(contact).state ? COVER_OPEN : COVER_CLOSED;"  # Lambda function to determine the cover state
    open_action:
      then:
        - if:
            condition:
              lambda: 'return !id(contact).state;'  # Condition to check if the gate is not already open
            then:
              - switch.turn_on: relay  # Turn on the relay to open the gate
    stop_action:
      - switch.turn_on: relay  # Turn on the relay to stop the gate
    close_action:
      then:
        - if:
            condition:
              lambda: 'return id(contact).state;'  # Condition to check if the gate is not already closed
            then:
              - switch.turn_on: relay  # Turn on the relay to close the gate

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"  # Text sensor for IP address
    ssid:
      name: "Connected SSID"  # Text sensor for connected SSID
    mac_address:
      name: "Mac Address"  # Text sensor for MAC address

time:
  - platform: sntp
    id: sntp_time  # Time platform for SNTP
